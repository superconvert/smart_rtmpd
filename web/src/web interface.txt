// ------------------------------------------
// 1. 登陆页面
// ------------------------------------------
   用户默认 :  admin ，密码：， 最好带验证码

   --------------------------------------- 与 后台交互 JSON 定义 ------------------------------------------
   1.1. HTTP POST 方法
       http://192.168.1.1/api/login
       
    HTTP REQUEST
    {
        "id" : "admin",
        "pwd" : "md5(md5(密码))"
    }

    返回的是登陆验证的 token
    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": {
            "token": "xxxxx"
        }
    }

    后续的 ajax 请求 HTTP 头必须带 Authorization，表示登陆验证信息，参见下面的 Authorization

    $.ajax({
        headers: {
            "Authorization": token
        },
        url:url,
        contentType: "application/json",
        dataType: "json",
        data: JSON.stringify(param),
        cache: false,
        processData: false,
        async:status,
        type:"put",
        success:function (res) {
        },
        error:function(){
        },
        statesCode：{
            999:function () {
               //token 异常处理
            },
            888:function () {
               //token 异常处理
            }  
        }
    });

// ------------------------------------------
// 2. 服务器配置页面
// ------------------------------------------

   全局配置
       鉴权地址 
       内外网映射 inner 地址 192.168.1.1， outer 地址 156.25.32.68
       RTP 端口范围 min 3000 到 max 60000

   SSL 配置
       CA 配置     地址栏                                按钮 [ 上传 ]
       服务器私钥  地址栏                               按钮 [ 上传 ]
       服务器证书  地址栏                               按钮 [ 上传 ]
       客户端私钥  地址栏                               按钮 [ 上传 ]
       客户端证书  地址栏                               按钮 [ 上传 ]

    RTMP 配置
       1. RTMP 端口 ，默认，1935
       2. SSL 开启/关闭
       3. GOP缓存 开启/关闭
       4. ChunkSize 最小 128, 最大 不限制
       5. 转 RTSP 开启/关闭
       6. 转 HTTP-HLS ( m3u8 ) 开启/关闭
       7. 转 HTTP-DASH 开启/关闭
       8. 转 WEBRTC 开启/关闭
       9. 转 SRT 开启/关闭
       10. 流最大空闲时间， 默认 10 秒, 超过空闲时间，系统断开

  RTSP 配置
        1. RTSP 端口，默认，   8554
        2. RTSP 开启/关闭
        3. SSL 开启/关闭
        4. 流最大空闲时间， 默认 10 秒，超过空闲时间，系统断开
        5. 转 RTMP 开启/关闭

  HTTP 配置
         1. HTTP 端口，默认     8080
         2. HTTPS 端口， 默认  8181
         3. IO 抖动大小
         4. HLS 切片个数，默认 3
         5. HLS 切片时长，默认 5， 单位秒
         6. HLS 缓存个数，默认 6          
         7. DASH 切片时长, 默认 6， 单位秒
         8. DASH 缓存个数，默认 12
         9. 录像模式 HLS 模式, DASH 模式
         10. 录像切片时长 ，默认 3， 单位分钟

   SRT 配置
         1. SRT 端口 , 默认  9000
         2. SRT 开启/关闭
         3. 转 RTMP 开启/关闭


    --------------------------------------- 与 后台交互 JSON 定义 ------------------------------------------

    2.1 获取配置 
    HTTP GET 方法
        http://192.168.1.1/api/config

    2.2 设置配置
    HTTP POST 方法
        http://192.168.1.1/api/config

    2.3 HTTP 包体
    HTT BODY 格式 ( JSON )

    {
        "code": 0,
        "msg": "ok",
        "data": {
            "global": {
                "auth_url": "http://www.qiyicc.com/authentication",
                "rtp_min": 30000,
                "rtp_max": 65535
            },
            "nat": {
                "rtmp": "",
                "rtsp": "",
                "http": "",
                "https": "",
                "srt": "",
                "rtp": ""
            },
            "ssl": {
                "ca": "ca.pem",
                "server_key": "server.key",
                "server_cert": "server.cert",
                "client_key": "client.key",
                "client_cert": "client.cert"
            },
            "rtmp": {
                "port": 1935,
                "ssl": false,
                "gop_cache": false,
                "chunk_size": 8192,
                "has_rtsp": true,
                "has_hls": true,
                "has_dash": true,
                "has_webrtc": true,
                "has_srt": true,
                "max_idle": 10
            },
            "rtsp": {
                "port": 554,
                "enable": true,
                "ssl": false,
                "max_idle": 10,
                "has_rtmp": true
            },
            "http": {
                "port": 8080,
                "enable": true,
                "sport": 8181,
                "ssl": false,
                "io_shrink": 32,
                "hls_count": 3,
                "hls_duration": 5,
                "hls_cache": 6,
                "dash_duration": 6,
                "dash_cache": 12,
                "rec_mode": 0,
                "rec_period": 3
            },
            "srt": {
                "port": 9000,
                "enable": true,
                "has_rtmp": true
            }
        }
    }

    //---------------------------  注意事项  -----------------------------------
    1. 保存一定要提示，本项操作会重启服务，让用户确认再进行提交。
    2. rec_mode : 0 - dash 模式,  1 - hls 模式


// ------------------------------------------ 
// 3. 服务器管理
// ------------------------------------------
     服务器当前状态显示（运行中，停止运行），那些服务正在运行，端口
     服务器启动，服务器停止，服务器重启，用户点击提示确认，再停止，重启。

    --------------------------------------- 与 后台交互 JSON 定义 ------------------------------------------
    3.1 获取当前服务运行状态
    HTTP GET 方法
        http://192.168.1.1/api/service

    HTTP 包体
    HTT BODY 格式 ( JSON )

    {
        "code": 0,
        "msg": "ok",
        "data" : {
            "start_time": "启动时间",                   // 服务启动时间
            "rtmp": {
                "port": 1935,                                // RTMP 端口
                "ssl": false,                                   // ssl 未开启
                "run": true                                   // true - 运行, false - 停止
            },
            "rtsp": {
                "port": 554,                                 // RTSP 端口
                "ssl": false,                                  // ssl 未开启
                "run": true                                  // true - 运行, false - 停止
            },
            "http": {
                "port": 8080,                              // HTTP 端口
                "ssl": false,                                 // ssl 未开启
                "run": true,                                // true - 运行, false - 停止
                "sport": 8181                             // 如果 ssl 为 true, 则需要显示 https 的端口
            },
            "srt": {
                "port": 9000,                             // SRT 端口
                "run": true                                // true - 运行, false - 停止
            }
        }
    }

    3.2 服务启动
    HTTP POST 方法
        http://192.168.1.1/api/start

    HTTP RESPONSE

    {
        "code": 0,
        "msg": "ok"
    }

    3.3 服务停止
    HTTP POST 方法
        http://192.168.1.1/api/stop

    HTTP RESPONSE

    {
        "code": 0,
        "msg": "ok"
    }

    3.4 服务重启
    HTTP POST 方法
        http://192.168.1.1/api/restart

    HTTP RESPONSE

    {
        "code": 0,
        "msg": "ok"
    }


// ------------------------------------------
// 4. 流媒体管理
// ------------------------------------------

     当前所有流列表 ，每个流就是一个 rtmp://www.qiyicc.com/live/stream 这样的一条记录，这个记录可以展开，查看流信息
     流信息包括
     各个子流：
     rtmp                         rtmp://www.qiyicc.com/live/stream
     http-flv                     http://www.qiyicc.com:8080/live/stream
     http-hls                    http://www.qiyicc.com:8080/live/stream.m3u8
     http-dash                 http://www.qiyicc.com:8080/live/stream.mdp
     webrtc                      https://www.qiyicc.com:8181/live/stream.wms
     rtsp                           rtsp://www.qiyicc.com:8554/live/stream
     还包括视频编码，视频长宽，帧率，GOP ，运行时长，码流
     还包括音频编码，采样率，位数，声道，码流

     视频预览窗口， 点击 URL 能进行预览播放

    --------------------------------------- 与 后台交互 JSON 定义 ------------------------------------------
    4.1 获取所有的输入流
    HTTP GET 方法
        http://192.168.1.1/api/stream

    获取所有输入流
    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": {
            "stream": [
                "rtmp://192.168.1.1/live/music",
                "rtmp://192.168.1.1/live/sport"	    
            ]
        }
    }

    4.2 获取某个输入流的子流
    HTTP GET 方法
        http://192.168.1.1/api/stream?vhost=192.168.1.1:1935&app=live&name=sport

        参数 vhost 为上述的 vhost 路径
        参数 app 为上述 的 live，一般有两种类型 live 和 rec
        参数 name 为上述 的 music, sport 这个名字是客户动态更改的

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": {
            "rec": "hls",                                         // none - 无录像, hls, dash, mp4
            "from": "rtsp",                                    // none - 不知道, rtmp, rtsp, srt
            "rate" : "860kb/s",                              // 码流速率
            "duration" : "P1Y2M3DT4H5M6S",      // 推流时长 ISO 8601 时间格式
            "audio": {
                "codec": "aac",                               // 音频编码
                "samplerate": "44100",                    // 采样率
                "channel" : "2",                               // 通道数
                "samplebit": "16"                            // 采样位
            },
            "video": {
                "codec": "h264",                             // h264 或 h265
                "width": "1080",                              // 视频宽
                "height": "720",                              // 视频高
                "fps":  "25",                                    // 视频帧数
                "gop":  "60"                                   // GOP 大小
            },
            "urls": [
                {
                    "type": "rtmp",                                                               // 输出流类型 rtmp, rtsp, srt, http-flv, ws-flv, http-hls, http-dash, webrtc 这些类型
                    "url": "rtmp://www.qiyicc.com/live/stream"                    // URL 链接
                },
                {
                    "type": "http-hls",                                                          // 输出流类型 rtmp, rtsp, srt, http-flv, ws-flv, http-hls, http-dash, webrtc 这些类型             
                    "url": "http://www.qiyicc.com:8080/live/stream.m3u8",   // URL 链接
                },
                {
	    "type": "http-flv",                                                          // 输出流类型 rtmp, rtsp, srt, http-flv, ws-flv, http-hls, http-dash, webrtc 这些类型
                    "url": "http://www.qiyicc.com:8080/live/stream"            // URL 链接
                },
            ]
        }
    }

    4.3 播放 H5 流
    http-flv, ws-flv, http-hls, http-dash 基本都能满足 H5 的播放需求, 这个 token 动态申请获取
    这些 URL 可以直接播放预览 http://www.qiyicc.com:8080/live/stream.m3u8?token=xxxx

// ------------------------------------------
// 5. 日志文件
// ------------------------------------------
    日志查看当前的，可以下载指定的日志文件，可以查询日志文件列表。

    --------------------------------------- 与 后台交互 JSON 定义 ------------------------------------------
    5.1 获取日志列表
    HTTP GET 获取日志列表
        http://192.168.1.1/api/logfile?month=1

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": [
                "20210521.log",
                "20210522.log",
                "20210523.log"
        ]        
    }

    5.2 下载日志文件
    HTTP GET 获取日志文件
        http://192.168.1.1/api/logfile?name=20210521.log

    HTTP RESPONSE
    标准的文件下载方式

    5.3 下载日志内容
    HTTP GET 获取日志内容
        http://192.168.1.1/api/logmsg?line=60

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": { 
            "日志内容"
        }
    }

   line 参数如果不带，表示就是获取 60 行日志，用户可以指定行数，默认 60， 有个可调整的定时器，
   默认 3 秒刷新获取一次, 实时显示到管理界面上，以方便排查问题

// ------------------------------------------
// 6. 用户管理
// ------------------------------------------
    用户的数据后台用 sqlite，数据库名字：istream_db， 拥有两张表，一张用户表 user_info, user_service
    user_info          用户信息表                            user_service      用户业务表                                         
    id                     用户标识                                id                     用户标识
    password         用户密码 md5 存储                 type                 业务类型，推流，拉流，推拉流
    nickname         用户昵称                                starttime          开通日期
    email               用户电邮                                 endtime           停止日期
    mobile             用户手机
    regtime           用户注册时间

    可以添加用户，
    删除用户，
    为用户开通业务， 输入用户标识，业务类型，开通时间，停止时间，这些信息入库，并产生对应的 token=jwt( id + type + starttime + endtime )
    为所有结束的业务进行归档，方便后续查询用户业务历史记录, 可以增加表，表结构同 用户业务表

    --------------------------------------- 与 后台交互 JSON 定义 ------------------------------------------
    6.1 获取用户列表
    HTTP GET 获取用户列表
        http://192.168.1.1/api/user?page=2&limit=30
    搜索用户
        http://192.168.1.1/api/user?cmd=find&keyword=XXX
        其中参数 keyword 可以是 nickname, email, mobile, id 模糊查询

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "",
        "count": 30, // 总条数
        "data": [
            {
                "id": "111111",                                 // 用户 ID
                "email": "tom@google.com",           // 用户邮箱
                "mobile": "18901365118",                 // 用户手机
                "nickname": "xxxxxxxxxx",                // 用户昵称
                "regtime": "2021-01-01",                 // 注册时间
           },
           {
                "id": "333333",                                 // 用户 ID
                "email": "jerry@google.com",          // 用户邮箱
                "mobile": "16801365116",                // 用户手机
                "nickname": "yyyyyyyyyyy",              // 用户昵称
                "regtime": "2021-03-01",                 // 注册时间
           }
        ]
    }

    6.2 修改用户信息
    HTTP POST 修改用户信息
        http://192.168.1.1/api/user?cmd=modify

    HTTP REQUEST
    {
        "id": "111111",                                       // 用户id
        "email": "xxxx",                                     // 邮箱
        "mobile": "vvvvv",                                 // 手机
        "nickname": "xxxxxx",                           // 昵称
        "oldpwd": "md5(md5(yyyy))"
        "newpwd": "md5(md5(xxxx))"
    }

    如果更改密码就带 oldpwd, newpwd，如果更改用户信息，带 email, mobile

    6.3 为用户产生授权码
    HTTP POST 为用户产生授权码
        http://192.168.1.1/api/user?cmd=auth

    HTTP REQUEST
    {
        "id": "2222222",
        "type": "push",                                // 授权类型, push - 推流， pull - 拉流， all - 推拉流
        "begin": "2021-2-1",
        "end": "2021-8-1"
    }

    HTTP RESPONSE
    {
        "code": 0,                                        // 0 表示成功，其它表示失败
        "msg": "ok",                                     // 成功或成功失败的原因
        "data": {
            "token" : "ajksdfjk13j41234134"
        }
    }

    6.4 添加新用户
    HTTP POST 方法
        http://192.168.1.1/api/user?cmd=add

    HTTP REQUEST
    {
        "email": "xxx",
        "mobile": "yyy",
        "nickname": "zzz",
    }

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": {
            "id": "zzzz",
            "regtime": "xxxx"
        }
    }

    6.5 删除用户
    HTTP POST 方法
        http://192.168.1.1/api/user?cmd=del

    HTTP REQUEST
    {
        "user" : [10,11,12]        
    }

    需要提示确认删除.

    6.6 查询当前授权
    HTTP GET 查询用户的授权码
        http://192.168.1.1/api/user?cmd=auth&id=xxx


    HTTP RESPONSE
    {
        "code": 0,                                   // 0 表示成功，其它表示失败
        "msg": "ok",                               // 成功或成功失败的原因
        "count": 10,                               // 总条数
        "data": [{
            "type": "push",
            "begin": "2021-05-01",
            "end": "2021-08-06",
            "token" : "!21@51￥#12"
        }]
    }

    6.7 删除/禁止授权码 ( 先用删除吧 )
    HTTP POST 方法
        http://192.168.1.1/api/user?cmd=auth&id=xxx

    HTTP REQUEST
    {
        "action": "delete"                          // delete - 删除,  forbiden - 禁止
    }

    需要提示确认删除.
    HTTP RESPONSE
    {
        "code": 0,                                    // 0 表示成功，其它表示失败
        "msg": "ok",                                // 成功或成功失败的原因     
    }

// ------------------------------------------
// 7. 软件升级
// ------------------------------------------
    可以上传最新软件包，点更新按钮。

// ------------------------------------------
// 8. 系统信息的查询页面
// ------------------------------------------
    运行时间： 
    CPU 类型
    CPU 核数
    CPU 负载 ( windows 下没有这个， 不需要显示 ) 
    CPU 架构
    操作系统类型
    操作系统平台:
    内存大小：
    内存空闲：
    网卡信息列表 
    硬盘信息列表

    -------------------------------- 与后台 JSON 交互 --------------------------------------
    8.1  获取系统信息
    HTTP GET 方法
        http://192.168.1.1/api/sysinfo

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": {
           "run_time": "20:10:16:56",             // 开机运行时间 20 天, 10 小时, 16 分钟，56 秒
           "cpu_info" : [
               {
                   "type": "CPU 型号",              // CPU 型号
                   "speed" : "2.9G",                  // CPU 频率
                   "used" : "CPU 使用率"          // CPU 使用率
               },
               {
                   "type": "CPU 型号",              // CPU 型号
                   "speed" : "2.9G",                  // CPU 频率
                   "used" : "CPU 使用率"          // CPU 使用率
               }
           ],
           "cpu_average": [1,5,15],               // CPU 负载 1 分钟负载， 5 分钟负载，15 分钟负载
           "os_type": "操作系统类型 WINNT",
           "os_platform": "操作系统平台, 32, 64",
           "mem_size": "内存大小",
           "mem_free": "内存空闲",
           "net_interface": [
                {
                    "ip": "192.168.1.1",
                    "type": "ipv4"
                    "mac" : "mac 地址",
                },
                {
                    "ip": "10.0.0.1",
                    "type": "ipv4",
                    "mac" : "mac 地址",
                }
           ],
           "disk_info": [
                {
                    "mounted" : "盘符",            // 例如：C 盘
                    "total" : "8T",                // 磁盘大小
                    "used" : "5T",                 // 磁盘使用
                    "capacity" : "62.5"            // 使用率 62.5%
                },
                {
                    "mounted" : "盘符",            // 例如：C 盘
                    "total" : "8T",                // 磁盘大小
                    "used" : "5T",                 // 磁盘使用
                    "capacity" : "62.5"            // 使用率 62.5%
                }
            ]
        }
    }

     !!! 如果任意一样值超过 50% 小于 85% 显示黄色字体， 大于等于 85% 显示红色字体 !!!

     可以手动随时刷新，也可以定时刷新默认 10 秒一次，可以配置


// ------------------------------------------
// 9.  支持中英文切换
// ------------------------------------------
    支持第三方语言添加
 
    语言和那个下拉框都属于静态资源，如果需要定制第三方资源包，

    我的建议，所有的语言包都放置到固定目录 lang 下面，lang 下面有个固定文件
    lang.json， 还有默认的两个语言包 common_en.properties, common_cn.properties, 
    分别代表英文和中文，其中 lang.json 格式如下

    {
        "lang" : [
            {
                "name": "ไทย",
                "file" : "common_thailand.properties"
            },
            {
            }
        ]
    }

    前端读取，就只需读取 lang.json 即可，这样就能拿到所有的语言包文件了。比如：我想新扩一个泰语。
    新建立语言包  common_thailand.properties，lang.json 就是上面的格式

    前端刷新获取 lang.json 文件，其中中文和英文属于固定的，不包含在此文件内，如果 lang.json 有内容
    说明有第三方语言包，那么前端的语言选择框内需要增加 name 值作为显示语言的名字，比如：上述 lang.json
    语言选择框就多了 ไทย ( 泰文 )，语言包的名字为 file 字段，比如上面的 common_thailand.properties.

    这样页面上的语言下拉列表的那些语言切换的内容，就可以通过这些文件的第一行进行读取了。

    -------------------------------- 与后台 JSON 交互 --------------------------------------
    9.1  语言包上传
    HTTP POST 方法
        http://192.168.1.1/api/lang?cmd=add

    HTTP REQUEST 
    {        
        "name": "ไทย",
        "file": "common_thailand.properties",
        "data": "" // 这个是语言包的内容
    }

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok"
    }
    
    上传成功后，前端接收到响应后，刷新当前所有页面

    9.2  删除语言包
    HTTP POST 方法
        http://192.168.1.1/api/lang?cmd=del

    HTTP REQUEST 
    {        
        "name": "ไทย"     // 要删除的语言包名字
    }

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok"
    }

    这个接口主要是，防止上传的语言包制作有误，导致不能正确使用，需要重新制作。删除完毕
    前端收到服务器的响应后，刷新当前所有页面

    9.3 获取语言包列表
    HTTP GET 方法
        http://192.168.1.1/api/lang
 
    HTTP REQUEST
    {
        "code": 0,
        "msg": "ok",
        "data": {
            {
                "name": "ไทย",
                "file": "common_thailand.properties",
            },
            {
                "name": "ไทย",
                "file": "common_thailand.properties",
            },
        }
    }

    9.4 获取语言包
    HTTP GET 方法
         http://192.168.1.1/api/lang?file=common_thailand.properties

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok",
        "data": 语言包内容
    }    


    官方的网站，email 
    采用 TPLINK 风格
    前后端用 JSON 格式交换数据
    基于 https://github.com/superconvert/smart_rtmpd/tree/master/web 这个进行二次开发

// ------------------------------------------
// 10.  换肤 （ 具体动态调色 ）
// ------------------------------------------
    可以根据用户的需求，调整背景颜色，
    
    这个后台是 nodejs 的，npm install 然后 node server.js 即可运行

// ------------------------------------------
// 11.  转发策略
// ------------------------------------------
用户可以根据需要把当前流转发到第三方平台上， 现在支持两种转发配置，vhost 转发和 url 转发

  11.1  获取转发策略
  HTTP GET 方法
      http://192.168.1.1/api/policy
  
  HTTP RESPONSE 
  {
      "code": 0,
      "msg": "ok",
      "data": {
          "vhosts" : [
              {
                  "vhost" : "192.168.1.1:1935",
                  "forward": [
                      {
                          "ssl": false,
                          "rewrite" : false,
                          "host" : "192.168.1.7:1936"
                      },
                      {
                          "ssl": false,
                          "rewrite" : false,
                          "host" : "192.168.1.8:1936"
                      },
                  ]
              },
              {
                  "vhost" : "192.168.1.3:1935",
                  "forward": [
                      {
                          "ssl": false,
                          "rewrite" : false,
                          "host" : "192.168.1.4:1936"
                      },
                      {
                          "ssl": false,
                          "rewrite" : false,
                          "host" : "192.168.1.5:1936"
                      },
                  ]
              }
          ],
          "urls" : [
              {
                  "url" : "rtmp://192.168.1.1/live/stream"
                  "forward": [
                      {
                          "ssl": false,
                          "rewrite" : "rtmp://www.qiyicc.com/live/sport",
                          "host": "192.168.1.101:1935"
                      },
                      {
                          "ssl": false,
                          "rewrite" : "rtmp://www.qiyicc.com/live/sport",
                          "host": "192.168.1.101:1935"
                      },
                  ]
              },
              {
                  "url" : "rtmp://192.168.1.1/live/stream"
                  "forward": [
                      {
                          "ssl": false,
                          "rewrite" : "rtmp://www.qiyicc.com/live/sport",
                          "host": "192.168.1.101:1935"
                      },
                      {
                          "ssl": false,
                          "rewrite" : "rtmp://www.qiyicc.com/live/sport",
                          "host": "192.168.1.101:1935"
                      },
                  ]
              }              
          ]
      }
  }

  11.2  设置转发策略
  HTTP POST 方法
      http://192.168.1.1/api/policy

  HTTP REPONSE 格式如上

  此页面分为两个区域 一个是 vhost 转发策略，一个是 url 转发策略
  vhost 转发策略是针对某一种 vhost 做转发策略
  <!-- e.g. : url is rtmp://www.qiyicc.com/live/sport, vhost = www.qiyicc.com, app = live, stream = sport -->
  <!-- 对 vhost 为 www.qiyicc.com 进行转发, 配置如下: <vhost name="www.qiyicc.com">, 那么 url 的 vhost 值为 www.qiyicc.com 的将会被转发 -->
  <vhost name="">
      <!-- <forward rewrite="true">www.cctv5.com:1936</forward> 假设 rewrite 为 true, forward 配置为 www.cctv5.com:1936, -->
      <!-- 那么源 url: rtmp://www.qiyicc.com/live/sport, 则会改写为 url: rtmp://www.cctv5.com:1936/live/sport -->
      <forward rewrite="false"></forward>
      <!-- 假设 rewrite 为 false, forward 配置为 192.168.1.1:1936, 那么 rtmp://www.qiyicc.com/live/sport, 则保持不变 rtmp://www.qiyicc.com/live/sport -->
      <forward rewrite="false"></forward>
  </vhost>
  <!-- vhost 可以配置多个 -->
  <vhost name="">
  </vhost>

  url 转发策略是针对特定的 url 做转发
  <!-- 可以针对具体的 url 进行 forward，从而避免 forward 整个 vhost, 比如： rtmp://192.168.1.1/live/stream -->
  <!-- 配置如下: <url name="rtmp://192.168.1.1/live/stream"> 那么 url 值为 rtmp://192.168.1.1/live/stream 的将会被转发, 这样的转发更精确 -->
      <url name="">
          <!-- <forward rewrite="rtmp://www.cctv5.com:1936/live/football">www.cctv5.com:1936</forward> rewrite 是具体的 url -->
          <!-- 那么源 url: rtmp://www.qiyicc.com/live/sport, 则会改写为 url: rtmp://www.cctv5.com:1936/live/football -->
	<forward rewrite=""></forward>
	<!-- <forward rewrite="">www.cctv5.com:1936</forward> rewrite 为空的情况下 -->
                <!-- 那么源 url: rtmp://www.qiyicc.com/live/sport, 则不会改写, 还是为 url: rtmp://www.qiyicc.com/live/sport -->
	<forward rewrite=""></forward>
                <!-- forword 可以有多个, 根据需要自行扩充 -->
	<forward rewrite=""></forward>
      </url>
      <!-- url 可以配置多个 -->
      <url name="">
  </url>

// ------------------------------------------
// 12.  升级包上传
// ------------------------------------------
上传文件到服务器

    12.1 上传文件
    HTTP POST 请求
        http://192.168.1.1/api/upload

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok"        
    }
    
    --------------------------------------------
    文件上传例子
    --------------------------------------------
    <!DOCTYPE html>
    <html lang="zh-CN">
        <head>
            <meta charset="utf-8">
        </head>
	
        <body>
             文件：<input type="file" id="f1" multiple><br>
            <input type="button" value="提交" id="btn">
        </body>
        <script>
            window.onload = function () {
                    let ouser = document.getElementById('user');
                    let opwd = document.getElementById('pwd');
                    let obtn = document.getElementById('btn');
                    let of1 = document.getElementById('f1');
			
                    obtn.onclick = function () {
                        let data = new FormData();
                        Array.from(of1.files).forEach(file =>{
                            data.append('f1',file);
                        })
				
                        let OAjax = new XMLHttpRequest();
                        OAjax.open('POST', 'http://localhost:5000/api/upload', true);
                        OAjax.send(data);
                        OAjax.onreadystatechange = function () {
                            if (OAjax.readyState == 4) {
                                if (OAjax.status >= 200 && OAjax.status <= 300 || OAjax == 304) {
                                    alert('成功');
                                } else {
                                    alert('失败');
                                }
                            }
                        }
                    }
                }
            </script> 
    </html>

    12.2 执行命令
    HTTP POST 请求
        http://192.168.1.1/api/execute

    HTTP REQUEST
    {
        "cmd" : "update"
    }

    HTTP RESPONSE 
    {
        "code": 0,
        "msg": "ok"
    }
    
// ------------------------------------------
// 13.  修改管理后台的密码
// ------------------------------------------
修改管理后台的密码

    13.1 修改管理后台的密码
    HTTP POST 请求
        http://192.168.1.1/api/password

    HTTP REQUEST
    {
        "name": "admin",
        "oldpwd": "md5(md5(password))",
        "newpwd": "md5(md5(password))",
    }

    HTTP RESPONSE
    {
        "code": 0,
        "msg": "ok"        
    }